package SQL;

import java.io.File;
import java.io.IOException;
import java.sql.*;
import java.util.ArrayList;
import java.util.Optional;
import java.util.Properties;

/**
 * SQLite Database class for saving and loading the game
 *
 * @author Varga Bence
 */
public class SQLDatabase implements AutoCloseable {
    private final File database;
    private final Connection connection;

    /**
     * Creates database instance, creates a file for the database if it's not exists and establish a connection
     *
     * @param filename The name of the SQLite database file
     * @throws SQLException         from {@link DriverManager#getConnection(String)} function
     * @throws IOException          from {@link File#createNewFile()} function
     * @throws SecurityException    from {@link File#createNewFile()} function
     * @throws NullPointerException from {@link File#File(String)} function
     */
    public SQLDatabase(String filename) throws SQLException, IOException {
        database = new File(filename);
        database.createNewFile();

        Properties properties = new Properties();
        properties.setProperty("foreign_keys", "on");
        connection = DriverManager.getConnection("jdbc:sqlite:" + database.getPath(), properties);
        createTables();
    }

    /**
     * Creates save, building, zone and citizen tables
     *
     * @throws SQLException                 from {@link Connection#createStatement()} and {@link Statement#executeUpdate(String)} functions
     * @throws java.sql.SQLTimeoutException from {@link Statement#executeUpdate(String)} function
     */
    public void createTables() throws SQLException {
        try (Statement statement = connection.createStatement()) {
            statement.executeUpdate(SQLScript.createSQL);
        }
    }

    /**
     * Drops save, building, zone and citizen tables
     *
     * @throws SQLException                 from {@link Connection#createStatement()} and {@link Statement#executeUpdate(String)} functions
     * @throws java.sql.SQLTimeoutException from {@link Statement#executeUpdate(String)} function
     */
    public void dropTables() throws SQLException {
        try (Statement statement = connection.createStatement()) {
            statement.executeUpdate(SQLScript.dropSQL);
        }
    }

    /**
     * Returns all saves in the database
     *
     * @return ArrayList containing the saves, empty if there is no save available
     * @throws SQLException                 from jdbc functions
     * @throws java.sql.SQLTimeoutException from {@link Statement#executeQuery(String)} function
     */
    public ArrayList<Save> getAllSaves() throws SQLException {
        String allSaveSQL = "SELECT * FROM save";
        ArrayList<Save> saves = new ArrayList<>();

        try (Statement statement = connection.createStatement()) {
            ResultSet resultSet = statement.executeQuery(allSaveSQL);

            while (resultSet.next()) {
                saves.add(new Save(resultSet));
            }
        }

        return saves;
    }

    /**
     * Return a save from the database
     *
     * @param save_id the primary key of the save
     * @return an optional save value or a empty optional if the save wasn't found
     * @throws SQLException                 from jdbc functions
     * @throws java.sql.SQLTimeoutException from {@link PreparedStatement#executeQuery()} function
     */
    public Optional<Save> getSave(int save_id) throws SQLException {
        String saveSQL = "SELECT * FROM save WHERE id = ?";

        try (PreparedStatement preparedStatement = connection.prepareStatement(saveSQL)) {

            preparedStatement.setInt(1, save_id);

            ResultSet resultSet = preparedStatement.executeQuery();

            if (resultSet.next()) {
                return Optional.of(new Save(resultSet));
            }
        }

        return Optional.empty();
    }

    /**
     * Insert a new save to the database, the primary key is autogenerated
     *
     * @param save_name the name of the save - must be unique
     * @param money     the mayors money
     * @param year      the current game year
     * @param month     the current game month
     * @param week      the current game week
     * @return generated primary key if insertion is successful, -1 if not
     * @throws SQLException                    from JDBC functions
     * @throws SQLFeatureNotSupportedException from {@link Connection#prepareStatement(String, int)} and
     *                                         {@link PreparedStatement#getGeneratedKeys()} functions
     */
    public int insertNewSave(String save_name, double money, int year, int month, int week) throws SQLException {
        int generatedKey = -1;

        String insertSaveSQL = "INSERT INTO save (save_name, money, year, month, week) VALUES (?, ?, ?, ?, ?)";

        try (PreparedStatement statement = connection.prepareStatement(insertSaveSQL, Statement.RETURN_GENERATED_KEYS)) {
            statement.setString(1, save_name);
            statement.setDouble(2, money);
            statement.setInt(3, year);
            statement.setInt(4, month);
            statement.setInt(5, week);

            statement.executeUpdate();

            try (ResultSet generatedKeys = statement.getGeneratedKeys()) {
                if (generatedKeys.next()) {
                    generatedKey = generatedKeys.getInt(1);
                }
            }
        }

        return generatedKey;
    }

    /**
     * Delete a save from the database + all the city and citizen by this id
     *
     * @param save_id id of the save
     * @throws SQLException                 from jdbc functions
     * @throws java.sql.SQLTimeoutException from {@link PreparedStatement#executeQuery()} function
     */
    public void deleteSave(int save_id) throws SQLException {
        String deleteSaveSQL = "DELETE FROM save WHERE id = ?;";
        try (PreparedStatement preparedStatement = connection.prepareStatement(deleteSaveSQL)) {
            preparedStatement.setInt(1, save_id);
            preparedStatement.executeUpdate();
        }

    }

    /**
     * insert a city tile (Road, Tree, Building, Zone)
     *
     * @param coordinate_x x coordinate
     * @param coordinate_y y coordinate
     * @param save_id      id of the save
     * @param flag         id of the tile
     * @param level        The age of the tree, 0 for every one else
     * @throws SQLException                    from JDBC functions
     * @throws SQLFeatureNotSupportedException from {@link Connection#prepareStatement(String, int)} and
     *                                         {@link PreparedStatement#getGeneratedKeys()} functions
     */
    public void insertCity(int coordinate_x, int coordinate_y, int save_id, int flag, int level) throws SQLException {
        String insertCitizenSQL = """
                    INSERT INTO city (coordinate_x, coordinate_y, save_id, flag, level)
                    VALUES (? , ? , ?, ?, ?)
                """;
        try (PreparedStatement preparedStatement = connection.prepareStatement(insertCitizenSQL)) {
            preparedStatement.setInt(1, coordinate_x);
            preparedStatement.setInt(2, coordinate_y);
            preparedStatement.setInt(3, save_id);
            preparedStatement.setInt(4, flag);
            preparedStatement.setInt(5, level);

            System.out.println(preparedStatement);
            preparedStatement.executeUpdate();
        }

    }

    public void insertRoad(int coordinate_x, int coordinate_y, int save_id) throws SQLException {
        insertCity(coordinate_x, coordinate_y, save_id, 10, 0);
    }

    public void insertStadium(int coordinate_x, int coordinate_y, int save_id) throws SQLException {
        insertCity(coordinate_x, coordinate_y, save_id, 12, 0);
    }

    public void insertPolice(int coordinate_x, int coordinate_y, int save_id) throws SQLException {
        insertCity(coordinate_x, coordinate_y, save_id, 11, 0);
    }

    public void insertTree(int coordinate_x, int coordinate_y, int save_id, int level) throws SQLException {
        insertCity(coordinate_x, coordinate_y, save_id, 16, level);
    }

    public void insertCivil(int coordinate_x, int coordinate_y, int save_id) throws SQLException {
        insertCity(coordinate_x, coordinate_y, save_id, 1, 0);
    }

    public void insertIndustrial(int coordinate_x, int coordinate_y, int save_id) throws SQLException {
        insertCity(coordinate_x, coordinate_y, save_id, 7, 0);
    }

    public void insertService(int coordinate_x, int coordinate_y, int save_id) throws SQLException {
        insertCity(coordinate_x, coordinate_y, save_id, 4, 0);
    }

    /**
     * Returns all the city by a save id
     *
     * @param save_id id of the save
     * @return ArrayList containing the city tiles, empty if there is no city tile available
     * @throws SQLException                 from jdbc functions
     * @throws java.sql.SQLTimeoutException from {@link Statement#executeQuery(String)} function
     */
    public ArrayList<City> getAllCity(int save_id) throws SQLException {
        String allSaveSQL = "SELECT * FROM city WHERE save_id = ?";
        ArrayList<City> city = new ArrayList<>();

        try (PreparedStatement statement = connection.prepareStatement(allSaveSQL)) {
            statement.setInt(1, save_id);

            ResultSet resultSet = statement.executeQuery();

            while (resultSet.next()) {
                city.add(new City(resultSet));
            }
        }

        return city;
    }

    /**
     * Insert a new citizen to the database, the primary key is autogenerated
     *
     * @param save_id            id of the save associated with the citizen
     * @param age                the age of the citizen (age >= 18)
     * @param happiness          0 < happiness < 100
     * @param civil_coordinate_x x coordinate of the home
     * @param civil_coordinate_y y coordinate of the home
     * @param work_coordinate_x  x coordinate of the work
     * @param work_coordinate_y  y coordinate of the work
     * @return generated primary key if insertion is successful, -1 if not
     * @throws SQLException                    from JDBC functions
     * @throws SQLFeatureNotSupportedException from {@link Connection#prepareStatement(String, int)} and
     *                                         {@link PreparedStatement#getGeneratedKeys()} functions
     */
    public int insertCitizen(int age, int happiness, int save_id, int civil_coordinate_x, int civil_coordinate_y,
                             int work_coordinate_x, int work_coordinate_y) throws SQLException {
        int generatedKey = -1;

        String insertCitizenSQL = """
                    INSERT INTO citizen (age, happiness, save_id, civil_coordinate_x, civil_coordinate_y, work_coordinate_x, work_coordinate_y)
                    VALUES (?, ?, ?, ?, ?, ?, ?)
                """;
        try (PreparedStatement preparedStatement = connection.prepareStatement(insertCitizenSQL)) {
            preparedStatement.setInt(1, age);
            preparedStatement.setInt(2, 50);
            preparedStatement.setInt(3, save_id);
            preparedStatement.setInt(4, civil_coordinate_x);
            preparedStatement.setInt(5, civil_coordinate_y);
            if (work_coordinate_x == -1 || work_coordinate_y == -1) {
                preparedStatement.setNull(6, Types.NULL);
                preparedStatement.setNull(7, Types.NULL);
            } else {
                preparedStatement.setInt(6, work_coordinate_x);
                preparedStatement.setInt(7, work_coordinate_y);
            }


            System.out.println(preparedStatement);

            preparedStatement.executeUpdate();

            try (ResultSet generatedKeys = preparedStatement.getGeneratedKeys()) {
                if (generatedKeys.next()) {
                    generatedKey = generatedKeys.getInt(1);
                }
            }
        }

        return generatedKey;
    }

    /**
     * Insert a new citizen to the database without work, the primary key is autogenerated
     *
     * @param save_id            id of the save associated with the citizen
     * @param age                the age of the citizen (age >= 18)
     * @param happiness          0 < happiness < 100
     * @param civil_coordinate_x x coordinate of the home
     * @param civil_coordinate_y y coordinate of the home
     * @return generated primary key if insertion is successful, -1 if not
     * @throws SQLException                    from JDBC functions
     * @throws SQLFeatureNotSupportedException from {@link Connection#prepareStatement(String, int)} and
     *                                         {@link PreparedStatement#getGeneratedKeys()} functions
     */
    public int insertCitizen(int age, int happiness, int save_id, int civil_coordinate_x, int civil_coordinate_y) throws SQLException {
        return insertCitizen(age, happiness, save_id, civil_coordinate_x, civil_coordinate_y, -1, -1);
    }

    /**
     * Returns all the citizens for the given save
     *
     * @param save_id the id of the save
     * @return ArrayList containing the citizens, empty if there is no citizen available
     * @throws SQLException                 from jdbc functions
     * @throws java.sql.SQLTimeoutException from {@link PreparedStatement#executeQuery()} function
     */
    public ArrayList<Citizen> getAllCitizen(int save_id) throws SQLException {
        String allSaveSQL = "SELECT * FROM citizen WHERE save_id = ?";
        ArrayList<Citizen> citizens = new ArrayList<>();

        try (PreparedStatement statement = connection.prepareStatement(allSaveSQL)) {
            statement.setInt(1, save_id);

            ResultSet resultSet = statement.executeQuery();

            while (resultSet.next()) {
                citizens.add(new Citizen(resultSet));
            }
        }

        return citizens;
    }

    /**
     * @return SQLite file
     */
    public File getDatabase() {
        return database;
    }

    /**
     * @return SQLite connection
     */
    public Connection getConnection() {
        return connection;
    }


    /**
     * Closes the database connection
     *
     * @throws SQLException from {@link Connection#close()} function
     */
    @Override
    public void close() throws SQLException {
        connection.close();
    }

    /**
     * Deletes the SQLite database file
     *
     * @return true if and only if the file or directory is successfully deleted; false otherwise
     * @throws SecurityException from {@link File#delete()} function
     */
    public boolean delete() {
        return database.delete();
    }

    public void setAutoCommitTrue() throws SQLException {
        connection.setAutoCommit(true);
    }

    public void setAutoCommitFalse() throws SQLException {
        connection.setAutoCommit(false);
    }

    public void commit() throws SQLException {
        connection.commit();
    }
}
